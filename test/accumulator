#!/bin/bash
source global_settings
_IFACE='eth0'
_TEXT_CAPS='text/x-raw'
_b1fp=/tmp/b1fp
_b1bp=/tmp/b1bp
_b2fp=/tmp/b2fp
_b2bp=/tmp/b2bp

ats_create_timestamp ()
{
	timestamp=$(date +%T.%6N)
	if [[ $1 = on ]];then 
		echo $timestamp > $2on
		echo "Sending timestamp $timestamp to $2on"
	else 
		echo $timestamp > $2off
		echo "Sending timestamp $timestamp to $2off"
	fi
}

ats_open_fifos ()
{
	if [[ ! -p $1on ]]; then
		mkfifo $1on
		while true; do sleep 999999999; done >$1on &
		PIDS+=$!
	fi

	if [[ ! -p $1off ]]; then
		mkfifo $1off
		while true; do sleep 999999999; done >$1off &
		PIDS+=$!
	fi
}

ats_close_fifos ()
{
	if [[ -p $1on ]]; then
		rm $1on
	fi

	if [[ -p $1off ]]; then
		rm $1off
	fi
}

ats_kill_threads ()
{
	for PID in $PIDS; do
		echo "Checking PID $PID"
		if [[ -e /proc/$PID ]]; then
			echo "Killing PID $PID"
			kill -KILL $PID
		fi
	done
}

ats_clean_up ()
{
	echo
	echo "SIGINT received"
	echo "Killing threads"
	ats_kill_threads

	echo "Closing fifos"
	ats_close_fifos $_b1fp
	ats_close_fifos $_b1bp
	ats_close_fifos $_b2fp
	ats_close_fifos $_b2bp
}

echo "Opening fifos"
ats_open_fifos $_b1fp
ats_open_fifos $_b1bp
ats_open_fifos $_b2fp
ats_open_fifos $_b2bp

echo "Starting threads"
gst-launch-1.0 -q udpsrc multicast-group=$ATS_MONITOR01_FRONT_PERCH_IP auto-multicast=true multicast-iface=$_IFACE caps=$_TEXT_CAPS ! "text/x-raw" ! fdsink | while read line; do ats_create_timestamp $line $_b1fp; done &
PIDS+=$!

gst-launch-1.0 -q udpsrc multicast-group=$ATS_MONITOR01_BACK_PERCH_IP auto-multicast=true multicast-iface=$_IFACE caps=$_TEXT_CAPS ! "text/x-raw" ! fdsink | while read line; do ats_create_timestamp $line $_b1bp; done &
PIDS+=$!

gst-launch-1.0 -q udpsrc multicast-group=$ATS_MONITOR02_FRONT_PERCH_IP auto-multicast=true multicast-iface=$_IFACE caps=$_TEXT_CAPS ! "text/x-raw" ! fdsink | while read line; do ats_create_timestamp $line $_b2fp; done &
PIDS+=$!

gst-launch-1.0 -q udpsrc multicast-group=$ATS_MONITOR02_BACK_PERCH_IP auto-multicast=true multicast-iface=$_IFACE caps=$_TEXT_CAPS ! "text/x-raw" ! fdsink | while read line; do ats_create_timestamp $line $_b2bp; done &
PIDS+=$!

sleep 1

echo "All threads started, waiting for SIGINT"
echo "PIDS: $PIDS"

# Trap and kill all threads
trap ats_clean_up SIGINT

wait





#while true; do
#	sleep 1
#	echo test1
#done > $_PIPE &
#_PIDS[0]=$!
#
#while true; do
#	sleep 1
#	echo test2
#done > $_PIPE &
#_PIDS[1]=$!
#
#while true; do
#	sleep 1
#	echo test3
#done > $_PIPE &
#_PIDS[2]=$!
#
#trap "kill -KILL ${_PIDS[*]}" SIGINT
#wait
